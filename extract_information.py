# Import all necessary libraries at the top
import os
import gradio as gr
from gradio.themes.base import Base

# LangChain and MongoDB specific imports
from pymongo import MongoClient
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain.vectorstores import MongoDBAtlasVectorSearch
from langchain.llms import OpenAI
from langchain.chains import RetrievalQA

# This is required to load your environment variables from a .env file
from dotenv import load_dotenv

# Assuming 'key_param.py' contains your URI
import key_param

# Load environment variables from a .env file
load_dotenv()

# --- MongoDB and Vector Store Setup ---

# Initialize the MongoDB client
client = MongoClient(key_param.MONGO_URI)
dbName = "langchain_demo"
collectionName = "collection_of_text_blobs"
collection = client[dbName][collectionName]

# Define the text embedding model using the API key from your environment
embeddings = OpenAIEmbeddings(openai_api_key=os.getenv("OPENAI_API_KEY"))

# Initialize the Vector Store with the collection and embeddings
vectorStore = MongoDBAtlasVectorSearch(collection, embeddings)

# --- Function to handle the query ---

def query_data(query):
    # Perform Atlas Vector Search using LangChain's vectorStore
    # We retrieve the top 1 most similar document
    docs = vectorStore.similarity_search(query, K=1)
    as_output = docs[0].page_content

    # Define the Language Generation Model (LLM)
    # The temperature parameter controls the creativity of the response
    llm = OpenAI(openai_api_key=os.getenv("OPENAI_API_KEY"), temperature=0)

    # Get the vector store retriever
    retriever = vectorStore.as_retriever()

    # Load the RetrievalQA chain
    # "stuff" chain type takes a list of documents and combines them into a single prompt
    qa = RetrievalQA.from_chain_type(llm, chain_type="stuff", retriever=retriever)

    # Execute the chain to get the RAG-generated answer
    retriever_output = qa.run(query)

    # Return the raw vector search output and the RAG output
    return as_output, retriever_output

# --- Gradio Web Interface ---

with gr.Blocks(theme=Base(), title="Question Answering App using Vector Search + RAG") as demo:
    gr.Markdown(
        """
        # Question Answering App using Atlas Vector Search + RAG Architecture
        """
    )
    textbox = gr.Textbox(label="Enter your Question:")
    with gr.Row():
        button = gr.Button("Submit", variant="primary")
    with gr.Column():
        output1 = gr.Textbox(lines=1, max_lines=10, label="Output with just Atlas Vector Search (returns text field as is):")
        output2 = gr.Textbox(lines=1, max_lines=10, label="Output generated by chaining Atlas Vector Search to Langchain's RetrieverQA + OpenAI LLM:")

    # Call the query_data function when the button is clicked
    button.click(query_data, textbox, outputs=[output1, output2])

# Launch the Gradio application
demo.launch()
